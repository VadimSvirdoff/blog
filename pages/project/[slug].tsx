import path from "path";
import matter from "gray-matter";
import Nav from "../../components/nav";
import Footer from "../../components/footer";
import Head from "next/head";
import { MDXRemote } from "next-mdx-remote";
import { serialize } from "next-mdx-remote/serialize";
import { promises as fs } from "fs";
import { GetStaticPropsContext } from "next";
import styles from "../../styles/post.module.scss";
// @ts-ignore
import prism from "@mapbox/rehype-prism";

interface Project {
  compiledSource: string;
  scope: {
    title: string;
    slug: string;
  };
}

interface Props {
  project: Project;
}

export default function Post({ project }: Props) {
  return (
    <>
      <Head>
        <title>{project.scope.title} - Matthew Volk</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div className={styles.container}>
        <Nav />
        <MDXRemote {...project} />
        <Footer />
      </div>
    </>
  );
}

export async function getStaticPaths() {
  const projectDirectory = path.join(process.cwd(), "content/projects");
  const fileNames = await fs.readdir(projectDirectory);

  const slugs = await Promise.all(
    fileNames.map(async (filename) => {
      const filePath = path.join(projectDirectory, filename);
      const fileContent = await fs.readFile(filePath, "utf8");
      const { data } = matter(fileContent);
      const slug = `${data.slug}`;
      return slug;
    })
  );

  return {
    paths: slugs.map((slug) => ({
      params: {
        slug,
      },
    })),
    fallback: false,
  };
}

export async function getStaticProps({ params }: GetStaticPropsContext) {
  const projectDirectory = path.join(process.cwd(), "content/projects");
  const fileNames = await fs.readdir(projectDirectory);

  const projects = await Promise.all(
    fileNames.map(async (filename) => {
      const filePath = path.join(projectDirectory, filename);
      const fileContent = await fs.readFile(filePath, "utf8");
      const { data } = matter(fileContent);
      const slug = `${data.slug}`;
      return { slug, filePath };
    })
  );

  const match = projects.find((project) => {
    return project.slug === params!.slug;
  });

  const fileContent = await fs.readFile(match!.filePath, "utf8");
  const { content, data } = matter(fileContent);
  const project = await serialize(content, {
    scope: data,
    mdxOptions: { rehypePlugins: [prism] },
  });

  return { props: { project } };
}
